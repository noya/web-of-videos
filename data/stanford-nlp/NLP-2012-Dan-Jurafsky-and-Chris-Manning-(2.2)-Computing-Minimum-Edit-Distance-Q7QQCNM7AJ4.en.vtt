WEBVTT
Kind: captions
Language: en

00:00:00.800 --> 00:00:02.770
How are we going to compute
Minimum Edit Distance?

00:00:04.410 --> 00:00:07.210
The standard algorithm is
with dynamic programming.

00:00:07.210 --> 00:00:10.070
Dynamic programming is a tabular
method of computation.

00:00:10.070 --> 00:00:13.230
And what we're going to do
is we're going to compute D,

00:00:13.230 --> 00:00:16.330
the distance between two strings x and y.

00:00:16.330 --> 00:00:20.910
x of length n, y of length m,
by combining solutions to subproblems and

00:00:20.910 --> 00:00:23.030
combining solutions to subproblems.

00:00:23.030 --> 00:00:26.490
And is the intuition of all
dynamic programming algorithms.

00:00:26.490 --> 00:00:32.880
The intuition is very simple, for
small prefixes of length of i of

00:00:32.880 --> 00:00:37.710
string x and j of string y, we'll compute
the distance between those strings.

00:00:37.710 --> 00:00:40.020
And we'll compute our larger distances for

00:00:40.020 --> 00:00:43.900
larger strings based on those
previously computed smaller values.

00:00:43.900 --> 00:00:48.970
In other words, we're going to compute
the distance IJ between prefixes of

00:00:48.970 --> 00:00:54.070
string x of length i and
prefixes of string y of length j and

00:00:54.070 --> 00:00:59.210
for all i and j and
we'll end up In the end with the distance.

00:01:01.010 --> 00:01:02.760
So let's look at the actual equation.

00:01:02.760 --> 00:01:05.770
Here's the equation for
defining minimum at a distance.

00:01:05.770 --> 00:01:09.880
And I've given you Levenshtein distance,
which is the distance when there is a cost

00:01:09.880 --> 00:01:15.260
of one for insertions, and one for
deletions, and two for substitutions.

00:01:17.820 --> 00:01:20.290
So let's look
a the initialization condition.

00:01:20.290 --> 00:01:23.260
So we first say that

00:01:24.970 --> 00:01:29.450
any characters in x, so
this is the x string.

00:01:29.450 --> 00:01:34.190
For the i characters in x string
the distance between those and

00:01:34.190 --> 00:01:38.350
the nul string in y is the cost of
deleting each of those characters.

00:01:38.350 --> 00:01:42.280
So the cost of those is
the length of the string.

00:01:42.280 --> 00:01:43.820
We're deleting each character.

00:01:43.820 --> 00:01:48.370
And similarly for inserting all the
characters into y, to create the string y,

00:01:48.370 --> 00:01:50.200
the distance between the null string of x,

00:01:50.200 --> 00:01:54.550
and the string of y is just the length
of y, the insertion cost of y.

00:01:54.550 --> 00:01:57.230
And then we'll do the recurrence relation.

00:01:57.230 --> 00:02:01.560
So walking through string x,
and working to string y,

00:02:04.280 --> 00:02:08.260
will have that the distance in
any particular cell of our matrix

00:02:08.260 --> 00:02:13.480
is going to be the minimum way of getting
to that cell from three previous cells.

00:02:13.480 --> 00:02:19.760
If we go from string i that is one shorter
so we deleting one more thing in i.

00:02:21.060 --> 00:02:26.400
To make it j, or we're inserting
one thing into j to make it longer.

00:02:26.400 --> 00:02:32.280
Or we're substituting
between the previous string,

00:02:32.280 --> 00:02:34.780
X of length, i- 1, and Y of length, j- 1.

00:02:34.780 --> 00:02:39.390
We're adding in a new character
if it's the same in both strings,

00:02:39.390 --> 00:02:40.750
we have a cost of zero.

00:02:40.750 --> 00:02:42.840
If it's different,
we have a substitution cost of two.

00:02:42.840 --> 00:02:51.450
And then at the end, the distance between
the two strings is simply the D of N,M.

00:02:51.450 --> 00:02:54.850
The upper right corner of the matrix,
ao here's our table.

00:02:56.780 --> 00:03:02.710
And we can fill in each element of
the table from using this equation.

00:03:02.710 --> 00:03:07.947
That tells us the deletion cost, the
insertion cost, and the substitution cost.

00:03:10.165 --> 00:03:14.620
So let's do that,
I put the equation up here in the corner.

00:03:14.620 --> 00:03:17.640
So we want to know what's
the distance between

00:03:17.640 --> 00:03:22.000
the null string of Intention in
the execution obviously zero.

00:03:22.000 --> 00:03:22.900
The null string,

00:03:22.900 --> 00:03:28.100
the string i to the string nothing
is the cost of deleting an i.

00:03:28.100 --> 00:03:28.750
That's one.

00:03:30.410 --> 00:03:34.540
So now let's try to compute what's
the cost of converting I-N to E?

00:03:34.540 --> 00:03:40.250
Well intuitively we expect it's going to
be a deletion and a substitution.

00:03:40.250 --> 00:03:41.340
So let's see if that works out.

00:03:42.420 --> 00:03:51.190
All right, so the, element in this
cell is the minimum of three values.

00:03:51.190 --> 00:03:55.190
It's this distance plus one,
this distance plus one, or

00:03:55.190 --> 00:03:59.500
this distance plus either two if I and
zero are different.

00:03:59.500 --> 00:04:00.810
Or 0 if they're the same.

00:04:00.810 --> 00:04:01.820
Well they're different.

00:04:01.820 --> 00:04:07.040
So it's the minimum of I+1 which is 2,
1+1 which is 2 or 0+2 which is 2.

00:04:07.040 --> 00:04:09.060
So we have 2.

00:04:09.060 --> 00:04:12.760
So we're going to write 2 in this cell.

00:04:14.170 --> 00:04:19.440
Similarly if we want to know
the difference between I, N and

00:04:19.440 --> 00:04:24.040
E it's the minimum distance Of I into

00:04:24.040 --> 00:04:28.230
nothing plus 1, so 2 plus 1 or 3.

00:04:28.230 --> 00:04:31.920
Or the different distance between I and

00:04:31.920 --> 00:04:35.870
E plus the cost of adding in that N or 3.

00:04:35.870 --> 00:04:41.320
Or the cost of having just an I And

00:04:41.320 --> 00:04:45.080
adding in that N to T substitution,
which is 2 or 3.

00:04:45.080 --> 00:04:47.400
So again, we have three here.

00:04:47.400 --> 00:04:49.610
So we have a 2 and we have a 3.

00:04:49.610 --> 00:04:52.440
And if we continue along this manner,
again, in each case,

00:04:52.440 --> 00:04:56.520
looking at the three previous cells and
using this equation over here,

00:04:56.520 --> 00:05:02.730
we'll slowly end up with and so on.

00:05:09.780 --> 00:05:11.950
And if we continue along in this manner,

00:05:11.950 --> 00:05:17.464
we're going to end up with
the following complete table.

00:05:17.464 --> 00:05:19.830
So, every cell in this table.

00:05:19.830 --> 00:05:25.460
Let's take this cell,
tells you the cost of the edit distance of

00:05:25.460 --> 00:05:30.770
editing the string I-N-T-E and
turning it into this string, E-X-E.

00:05:30.770 --> 00:05:33.720
And that means that this value here,
in the upper-right corner,

00:05:33.720 --> 00:05:38.300
is the cost, the edit distance
between intention and execution.

00:05:38.300 --> 00:05:40.740
The cost of turning
intention into execution.

00:05:40.740 --> 00:05:45.130
And we see the value 8, which we earlier
said was the Levenshtein distance.

00:05:45.130 --> 00:05:49.110
So we have Levenshtein distance equals 8.

00:05:49.110 --> 00:05:53.330
That's our algorithm for
computing Minimum Edit Distance.

